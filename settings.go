package main

import (
	"github.com/kelseyhightower/envconfig"
	"log"
	"runtime"
	"crypto/x509"
	"crypto/tls"
	"encoding/base64"
)

var (
	settings Settings
	credentials Credentials
)

var LogLevelMap = map[string]int{
	"DEBUG":    LevelDebug,
	"INFO":     LevelInfo,
	"NOTICE":   LevelNotice,
	"WARN":     LevelWarn,
	"ERROR":    LevelError,
}

type Credentials struct {
	clientKeyPair tls.Certificate
	caCertPool    *x509.CertPool
}

type Settings struct {
	BIND_HOST                     string
	BIND_PORT                     int
	GODNS_READ_TIMEOUT            int
	GODNS_WRITE_TIMEOUT           int
	GODNS_UDP_PACKET_SIZE         int
	RESOLV_CONF_FILE              string
	BACKEND_RESOLVER_RW_TIMEOUT   int
	BACKEND_RESOLVER_TICK         int
	LOG_STDOUT                    bool
	LOG_FILE                      string
	LOG_LEVEL                     string
	ORACULUM_CACHE_BACKEND        string
	ORACULUM_CACHE_EXPIRE         int
	ORACULUM_CACHE_MAXCOUNT       int
	LOCAL_RESOLVER                bool
	INSECURE_SKIP_VERIFY          bool
	CLIENT_CRT_BASE64             string
	CLIENT_KEY_BASE64             string
	CA_CRT_BASE64                 string
	CLIENT_ID                     int
	CLIENT_ID_HEADER              string
	BACKEND_RESOLVERS             []string
	BACKEND_RESOLVERS_EXCLUSIVELY bool
	ORACULUM_API_FIT_TIMEOUT      int64
	ORACULUM_SLEEP_WHEN_DISABLED  int64
	ORACULUM_API_TIMEOUT          int64
	SINKHOLE_ADDRESS              string
	SINKHOLE_TTL                  int
	ORACULUM_ACCESS_TOKEN_VALUE   string
	ORACULUM_ACCESS_TOKEN_KEY     string
	ORACULUM_DISABLED             bool
	ORACULUM_URL                  string
	ORACULUM_IP_ADDRESSES_ENABLED bool
	Version                       string
	NUM_OF_CPUS                   int
}

func (s Settings) LogLevel() int {
	l, ok := LogLevelMap[s.LOG_LEVEL]
	if !ok {
		panic("Config error: invalid log level: " + s.LOG_LEVEL)
	}
	return l
}
/*
var (
	clientCertPEMBase64 string = ""
	clientKeyPEMBase64 string = "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRQ2JXZ0ZMZEVpRis3N0kKUXFHNTlHSXQrWTBZR3gyUzZhU3Nndk1zQit2OEoyU01SdmZxMnpSbm0xdnViZURRa0lGU2xWdUVxMmFCc2h2SAoxN284dzNYZmU2SlNDbUUyb3J5UmpRVjNJZDgxTVMvL0RCeFN3NC9aN2VlV1FXL05FaDVNeVZPVEJaVE42Z0EvCmd5OG1RTTFjSHNWVms1QmtBWXJZbStvZVlnd1V0ekRGVG1JMzF5Q3htNjVMY09qOU1SeEZPcWptcEh1d0VZbXMKaERYcFM4eEdQZXYzYzlJQTYvNHRLMWZRZlJRTGlWTVRrOFRheDBGenVhcDN3NG01Tk1ZbDFvSXlMcWY2N2RJYQo0bDhzSTFQK2UzdFVUa20zKy9xeE1tVEVYdzE2UHdUakw1bURsRmpKTlZRSDJNL01PUHI1TmZRYTNwTzlzSWZMClRTOTBOU2hrNVR5MHRXN204TDdJT1UyMEdtOFJwUng3T0ZVR1JweXJJSE0wVW9uREJ2RE82T0Vnak81MzJRMGMKYm9MSk9PWE5RelE0NFlpYVdoT1ZMd3Z4QStuMkJaVnAvYlhvQitxajE4TFIxSXp3anU5SUdyV0RXRk00UEJTeApQZSt0bVNlZjd5dXlwZWdlWWlKVCtHaVZoVEV0Zkx6dWpxQWxhaG56UEEvQW5sZGQ2RXRldzZJbWhrakRsR3k4CmMvYjF0ZHd5N3BMUHRST3dmcjFrcUFaZ2J3L3lyeGdFOW5oSjRMYlk1SEtWYXBCelZpeVJnSHJaZTZiUlM3OFgKV1NvSzc5NXo4Z3MrcnpHZ3dvdzZyR1hJRUwyZzhRSzFiVGE4MGZvYTNqQWRSajFkTGdubEhXWWZkKzVraFVwMwpocEFuTXpwZmtKU1pMemlDVmUzWjVWYVRQTjFWTHdJREFRQUJBb0lDQUJjK21sNzk0VFFhL09yZC9YRGpmaVUrCjU3dXBvdjB1ZEhOVGpLc1Q3RjFvVDRVbHdVYWswZXlHdEhTeWdDYjAyRVRSRUVhRGx1emxCMzhaYWtaWlFMUFYKdmUza203TWZHblAwMDlLRmdPNW1rN1hueS8wZVFkSHI1UEQ0alkvem5CRUZOcm9TNWJjQndsTytmem1NREs0eAo5SGpmZ1lWVkxiOUhaUHB5MVRmc1NTSGNucG1ZV00zNmExUGlheG9uVlFHT3kyTG5UWktFclVMZzdXZ2c3VW05ClRpZFNieU93Sy9INlFFTnowNkgrUkMzenVFcTc4YkV0SUxLVzBXNmkxTnNvZzRhYXNJdTlOZWpMNGsycVk1RDYKVFBQS1d3RnFkSkk2NWhUejNBSmtsNGlld0t1TmNOTjZaVDVmVkloTUpsRlBuMXk5M1FGTy9xS094QUR4U3ovQgoxMHJFVUowdk5IeTJIUGs2NTN5cDZ6L3ZMb2psS0JMTFlnQ0dOc3cxTXJjWXZlRDE4YTZjUWNTVXI4YzFlVXI1ClYzdm5Lb3NSMTc2RWNLT0ZQdThYc1FLSFJnTFdKNkhQWFlsS3VEZFdpeEU3TzBzQ2E1ZVZhUXhBUEV1UGE1V3kKVEdnRUgwTDllWkJXcnB0VFgxaHcxVnE3NE1TemhrZ2s5SHp3WEdybTR2UW9BSmptVWZsRmVGS1ZqVkZlK1pDYwpqY2o4Q0NVVnl4akY0LzRxcThVY1djaVFOemZmWHRldSs0RHl6TFRjU3NZTFJSWnR0UlpHVUxyNFh4cTA5RGRuCklHOTVMT29CRHozTDZ1bGNoay8wVHVsVE85UnVjbGdxVE9HNXNDQjl6bFZkWDg4bnh1UVVCSDRCaXFwaHhyaEsKQjNjaXVZdDZDRW4wbkwwaFU5Q2hBb0lCQVFESDZUSXJpcHd5c2g0MGVCZXVoZGJwT09JZGVaQUgwM0ZQWGdwYwpZVlpvVXppc3U4KzRjY2hNdTlKdmZQTkhZanBSSk1zUmN1LzBoQWxneXQ0THoyRHpJL2FXQ0hRNFlyWUdlR1ovCm91Q1MyUGRaWnlQWG1uNE5QYmFSTS9ua0NmdzN4Q0pTaXdFUUJ4Z1hqTzhDdHIxTXJTRTRsY3RGNHhyd2QrZlgKMENqL3gyV2s2SzFSR2ZyQW5ITTEyaVVhcVRaTHFnY3g3eDNhd0c5WFVoaUo1WTVLUkxzWm9YTThscGJCbUxPZAprek5uTGx6L2JIL2o0T2lPMkpiVTloeGFWSEZxb1NPZSttUXR1UnI0eTFmVHVCRXlJQkkzblQyd0V1bGhvcDNkCllsaGcrd3FTSG1MUFNheTA1eGF5QXNMKzJzZXZxcS80c0hkZ1BhWGZQOEFKSFJPM0FvSUJBUURHOEVvYlVpazUKOVphVWV2eU1lU081T252MWRlZmVZQ3k1dVFLeEdSQUwwaWhYUldIYkowMlpKdXdvWGJaNmdmR1hUVitLcnBkVQpOR3pXcnJqbnBSZ3BraUZlL3dHUWYydFB0eHdEZVpnaTN1eGs0Q1V3UHVvV21MS3hHdGJhcmQvcnhYeVRTb3pHCnJ2TDdrUHhaS1FzTDc0dTVkNE9rb2VQYXNUbWJ1dmdMMExMcnZya3laSVd5TXZlVnVubE1jQWpaNFJGYXBmckIKT1AwRVdWTU5LWS85RGc1eHdaWGh0L1lydjU3b2RsY2thcGNpR25pamlKeVRKL0dIVld5dFJab0VEUXZ1aHorTwo1R0pMaGtBM21aLzN1UHN2TXhCRzlEc0dVTGlldmo2bm1ZMkpvWWVFVFZFK2ZZbExYeFNlMitrYU1wejZKODhpCmZqeGF0VXhJUHZwSkFvSUJBRXRNUmM1cXRpek9ORnhWQTY2RDBSQWxrZDNDUlFMOW5JZGxoNGVHVGxLYlRoU1oKNVVLMjhOZ2VRc1FsajBqSzhlWlFjb0NQQjF6VlF1Y0hZcDJXTGhGRzhZRlBpOThWSnpUR3N1ek9mOEl3SVBLMgp5NlJSRjd1TERESWpIclBMSXdvcVFUZFFEa1ZvTnFYZ09zS043RDF1Vkw0SWhmazc4cEN5eVV2YnB5VzRpRXVXCkxIb0l6QTh5bnA2aEhTcXVvN25hUUQySnNIZ04xYUpSVk5iVDlVVjZIL01tZ2M1SGRsOVRVZ3cvUHJSVm5VZkUKS1dPKytqbWIwU3hEeXlnbStGVk9mcWxKN09QZi9nM0tJYm1vY2ltc05OQm4xSzEyWWh1WmNkYktUVG15TlNnVwpjK2RaKzhoajVvT0VVTWhIeGNFZ0RJb2loY1JsVkE0RDZDUkdwSDhDZ2dFQkFJMnBWbHdXS1oxSU1LNFMxZndCCjExcHpOd29YcDhGR294S3RtQ2tjTzd6dkxpTFhHVlBCclJRK0R6Uy9aczNkOG5kWGRZMS92ZXNNV2VTV0RyMkYKWnF0VGo4Zmh0dTk2aktQN05FdVZMcXpHS1hlNzFUK0J6WmZCckoxSkMyNDFHcHI5eWpQb2hrNkZEaW50bUlTMQpJVlNpZzlEU05qL3B1Q05teUNzSS9ORU5FQnVuZUtGVnk0NlZsSkJlZFRubEhhaHBDTDZRS3Z1azVTZFBwRUJmCk5GVnl5UDVnWjZhUUpSQUtKOUpKVXN4dnlxZFNTazNKWGhXNy85WHJFclJnTjhoaXNmaHMvdWwxNERqL3BJTHoKTm1Ka3F4bDFOMFlQYkdpVzJxRFB3RFlBdGpVbmZTVE5HZWx4NDI1MGltNkZFbnpCUmQ4c3NlZFNGUkJTd2J0QQpmV0VDZ2dFQkFLUkwrSERGNldiY2wvT0RxYmxqOHJmNnh3clRyZU5XUndsNjZHUE40SGZSSDR3MUZyWjJRbVRHCitRZ2UvOGFVRTZpSklhOFV5WDRiZytJQWdrZVhJT2VZN2JveUUyOCs4K2QyTkFMT1puc0xDZjZScHEzdXk2cjIKeHFkc0tGSnB3Q1J0QVRuc3dwU0EvOHU2TDBPd3o3L25GZnRDZ00vV0VtUVZ1RmxYSWZXd1c5KzNMWGpVSUhFRQovUnlpM1ZoMmtGMlQwaEF2SDNZbUtjd0NSZW44VUhubWRPRlRKOUd0ZmQ1VnJKQ01IUFpER3pza0c0b0NBT2tnCjNZVUxQUk5RcEpMYnJQWFRQNGUzK3ZnVitwcDNIZ3N6clgrVVJQRlk0WXVBOVRhelZSWEFSNkhJazVBaGgyYUUKL3dmM3FST3BOd1MxbnpKLzM1R1p4NDJvLy9NQzNCRT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="
	caCertPEMBase64 string = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZ3VENDQTZtZ0F3SUJBZ0lKQUl5R1UzS3RnOFBvTUEwR0NTcUdTSWIzRFFFQkN3VUFNSGN4Q3pBSkJnTlYKQkFZVEFrTmFNUmN3RlFZRFZRUUlEQTVEZW1WamFDQnlaWEIxWW14cFl6RU5NQXNHQTFVRUJ3d0VRbkp1YnpFUApNQTBHQTFVRUNnd0dVMmx1YTJsME1SRXdEd1lEVlFRRERBaHZjbUZqZFd4MWJURWNNQm9HQ1NxR1NJYjNEUUVKCkFSWU5hMkZ5YlVCbGJXRnBiQzVqZWpBZUZ3MHhOakV4TWpjeU1qUTBNekJhRncweU1URXhNREV5TWpRME16QmEKTUhjeEN6QUpCZ05WQkFZVEFrTmFNUmN3RlFZRFZRUUlEQTVEZW1WamFDQnlaWEIxWW14cFl6RU5NQXNHQTFVRQpCd3dFUW5KdWJ6RVBNQTBHQTFVRUNnd0dVMmx1YTJsME1SRXdEd1lEVlFRRERBaHZjbUZqZFd4MWJURWNNQm9HCkNTcUdTSWIzRFFFSkFSWU5hMkZ5YlVCbGJXRnBiQzVqZWpDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVAKQURDQ0Fnb0NnZ0lCQU9TWG9mS0thU0lkZWUvNUVQbmwzbWcyTXJ5bWJTaWFNNkRhMlhSZm55RXJEcWF2emdsWQpuRmhLS0dZUkVPVFh0cWIzeTlpRG5xTEhsaXB2MWpKb085cjFsVFlDOXpLUUo5WjdoOS9CYW5KdjJTNkxaT2lBCk9Hc0Vzb3l6bHY3WmhuM2lkclI3REVzVVZGUW1GUkc0TzlVNlVLYmFVY0p2S0RUbTFJd253eWxxMWtGc3JkYisKRXVJRlNvcnB1Rjhwdjd1aVhFK1VyOVV0eEtBZWVCa0JkdnIwWFZlVUhjQTRBOWNGTWxxd25QSUtZRlE3SDVReApIRCs1Vy9ETU5wVnBzd2Vyb203OUNNUCtmakMyQVFYRTlGaHZ2TVd2QlFiWlQrVW1pTkwyQk1ZZFl2MUJ1RzhlCmlPZnlRRlBxVzRsUGs2cEJlRTFKTE44Vm5WaG5UdXlvbWZNRHIwcmd2N3grV3g0ajMzRkFMcFlaWEtpamVUalkKNXVudGZNK0NZL3VjNzZiN1hqYlFvZHRmRldSdEw2cGZsTndZZVNLQVFOWGtKMm1NQUZ3dHJPQjZkMVEwaWdqbAp6eXdqU1hneWhSdmhaZVpQMGhITko2OERWd2R0eVNIaVY3cVpnMjMxcldEWnBMS0NmSldDQUp4bTZXbktPTjlxCitqWjdKN1lxTkJ4aWtrN1BxWGdqMFc0eE80SlNCVFc1d3VDWm9yd2pwVFZJaDVzdm14VnVld1JWUVVKcGxHSUEKTWVyU1Q0NkFyK0w0NnV6UmFkSEFPMXNDQVNGc0t0WGtsMDVUMytWcEhCcDRhVG9sQlVHUkdQWDVVbi9WVWUreAo1dHMvMm8zN2RJeC9abDhHOUZsVDVJdHJKTjRnUS8yK3dobjVLa0xqU0ZQb0lmb0tDbXhabVlQOUFnTUJBQUdqClVEQk9NQjBHQTFVZERnUVdCQlJTSUZJRzIyL2ZjeXZJU2JIN3FybGsvWGo0WGpBZkJnTlZIU01FR0RBV2dCUlMKSUZJRzIyL2ZjeXZJU2JIN3FybGsvWGo0WGpBTUJnTlZIUk1FQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElDQVFEWHBBbGlscmg3SEZnaGhTKzhxV08yODFlMGpEV05VKzFkZ1ZxUnc1bkE2WkNvNDI4SHNHMSs3V3hFCmRIc3BwdjRGSkVwdlp3dWE5NElWbVovbzllMGMyaHVwMFdFbiszcUwvdUpoMTlOdWxKYVFyQnVMWDFnWnlCd0cKcEZjRjMvcDZ2eENnTUo3V0V1V0RBYmdHMFhrTlhYRDlMTGFEZk0rOG1IbnQzS1ZpclQ1UTMxUVUyZUxBZGg4dApwY2lidkc1YWVQa2wvZzlhZUcyQkNiWVFhd1dEQTBOZmNIUnZ6MmkxbXhwMCtuWkRJSU1WUGZEcmxpRWh0NGRTCmtjOS9uKzdKNU9FZFZiSEZ5bURlMEFtbk5PRWQxa2hOSndTcnluS0xoRldxK1VQRHorcFkrcU96UDRJOVlGVUQKSnNBbXhlTWU0M0ZrRzlVUkVDSXJYRDNIYi81K0I4ZEhJL09MSTJTRjRKU0tBL0NOdWxhUklvc1IyMFZCdWJqNwp4SU5RWTAwSk9iUE5yNExUdWZQNWxoaTBwMWNZcHhZQ3VWT0hhL0IrZ29JSXdVaTg3NkFNSldRR21naHRvMWFhCmpEQnVBcTdjMXJvajBjWVlMQzBHei9HemJVY0RkQklROW8vQ0JPY3BKZE4xbFVkWVBZTThtYjY5MzdGV2VhL2IKcGl6Z0drWHR4Nm03L3RNUE5rV3pmeGlkM2hoZzJCTENka28rMUZFb1p0RUloM0QyZEgwSmhBcThMT3VYY3Z1Ugo1RjB6SGxrOUxYNFBkSGEwS3M2L3RIdEpaY1poR2tzVjhrK2JoUkRzQ1U5c2xWUlpNNTZ2R0o5U1V1K0QxWmViCmtJVEY0M2F1S1JkWHQrVmZQK0lCbDQ0dEdrWnp6cDYvWkUwNnh1U3U1UkFNeDI4UkV3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
)*/

func init() {
	err := envconfig.Process("SINKIT", &settings)
	if err != nil {
		log.Fatal(err.Error())
	}
	settings.Version = "0.5.0"
	if (settings.NUM_OF_CPUS == 0 || settings.NUM_OF_CPUS > runtime.NumCPU()) {
		settings.NUM_OF_CPUS = runtime.NumCPU()
	}
	log.Println("Settings loaded.")

	if (settings.LOCAL_RESOLVER) {
		//1369 magic number: base64 encoded 1024 ASCII chars.
		if (len(settings.CA_CRT_BASE64) < 1369) {
			log.Fatalf("SINKIT_CA_CRT_BASE64 env var string is too short to be valid, content: %s", settings.CA_CRT_BASE64)
		}
		if (len(settings.CLIENT_CRT_BASE64) < 1369) {
			log.Fatalf("SINKIT_CLIENT_CRT_BASE64 env var string is too short to be valid, content: %s", settings.CLIENT_CRT_BASE64)
		}
		if (len(settings.CLIENT_KEY_BASE64) < 1369) {
			log.Fatalf("SINKIT_CLIENT_KEY_BASE64 env var string is too short to be valid, content: %s", settings.CLIENT_KEY_BASE64)
		}
		if (settings.CLIENT_ID < 1) {
			log.Println("SINKIT_CLIENT_ID env var is not set to a meaningful int value. It will not be used.")
		} else {
			if (len(settings.CLIENT_ID_HEADER) < 1) {
				log.Println("SINKIT_CLIENT_ID env var is set, but the SINKIT_CLIENT_ID_HEADER seems too short to be valid.")
			}
		}
		if (settings.INSECURE_SKIP_VERIFY) {
			log.Println("SINKIT_INSECURE_SKIP_VERIFY is set to true. This is valid only in local testing environment.")
		}
		//log.Println(settings.CLIENT_CRT_BASE64)
		//log.Println(settings.CLIENT_KEY_BASE64)
		//log.Println(settings.CA_CRT_BASE64)

		clientCert, err := base64.StdEncoding.DecodeString(settings.CLIENT_CRT_BASE64)
		//clientCert, err := base64.StdEncoding.DecodeString(clientCertPEMBase64)

		//log.Println("@" + settings.CLIENT_CRT_BASE64 + "@")
		//log.Println("@" + os.Getenv("SINKIT_CLIENT_CRT_BASE64") + "@")
		//log.Println("@" + clientCertPEMBase64 + "@")

		if err != nil {
			log.Fatal(err.Error())
		}
		clientKey, err := base64.StdEncoding.DecodeString(settings.CLIENT_KEY_BASE64)
		//clientKey, err := base64.StdEncoding.DecodeString(clientKeyPEMBase64)
		if err != nil {
			log.Fatal(err.Error())
		}
		caCert, err := base64.StdEncoding.DecodeString(settings.CA_CRT_BASE64)
		//caCert, err := base64.StdEncoding.DecodeString(caCertPEMBase64)
		if err != nil {
			log.Fatal(err.Error())
		}
		keyPair, err := tls.X509KeyPair(clientCert, clientKey)
		if err != nil {
			log.Fatal(err.Error())
		}
		credentials.clientKeyPair = keyPair
		credentials.caCertPool = x509.NewCertPool()
		credentials.caCertPool.AppendCertsFromPEM(caCert)
		log.Println("Credentials loaded.")
	}
}
